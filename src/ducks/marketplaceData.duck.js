import { createSlice } from '@reduxjs/toolkit';
import { updatedEntities, denormalisedEntities } from '../util/data';

// ================ Redux Toolkit Slice ================ //

const initialState = {
  // Database of all the fetched entities.
  entities: {},
};

const marketplaceDataSlice = createSlice({
  name: 'marketplaceData',
  initialState,
  reducers: {
    addEntities: (state, action) => {
      const { sdkResponse, sanitizeConfig } = action.payload;
      const apiResponse = sdkResponse.data;
      state.entities = updatedEntities({ ...state.entities }, apiResponse, sanitizeConfig);
    },
  },
});

// Export the reducer as default
export default marketplaceDataSlice.reducer;

// ================ Selectors ================ //

/**
 * Get the denormalised listing entities with the given IDs
 *
 * @param {Object} state the full Redux store
 * @param {Array<UUID>} listingIds listing IDs to select from the store
 */
export const getListingsById = (state, listingIds) => {
  const { entities } = state.marketplaceData;
  const resources = listingIds.map(id => ({
    id,
    type: 'listing',
  }));
  const throwIfNotFound = false;
  return denormalisedEntities(entities, resources, throwIfNotFound);
};

/**
 * Get the denormalised entities from the given entity references.
 *
 * @param {Object} state the full Redux store
 *
 * @param {Array<{ id, type }} entityRefs References to entities that
 * we want to query from the data. Currently we expect that all the
 * entities have the same type.
 *
 * @return {Array<Object>} denormalised entities
 */
export const getMarketplaceEntities = (state, entityRefs) => {
  const { entities } = state.marketplaceData;
  const throwIfNotFound = false;
  return denormalisedEntities(entities, entityRefs, throwIfNotFound);
};

// ================ Action creators ================ //

// Export the action creators generated by createSlice
export const { addEntities } = marketplaceDataSlice.actions;

// ================ Helpers (maintains same API) ================ //
export const addMarketplaceEntities = (sdkResponse, sanitizeConfig) =>
  addEntities({ sdkResponse, sanitizeConfig });
